# Dealing with a regular expression
# when we dont use regular expression we have to write ton of code.
# 415-555-4242.

# def numberChecker(text):
#     if len(text) != 12:
#         return False
#     for i in range(0,3):
#         if not text[i].isdecimal():
#             return False
#     if text[3] != '-':
#         return False
#     for i in range(4,7):
#         if not text[i].isdecimal():
#             return False
#     if text[7] != '-':
#         return False
#     for i in range(8,12):
#         if not text[i].isdecimal():
#             return False
#     return True
#
# print(numberChecker("415-555-4242"))
# print(numberChecker("212-565-909"))


# 415-555-4242

def numberCheck(text):
    if len(text) != 12:
        return False
    for i in range(0,3):
        if text[i].isdecimal():
            return True
    if text[3] != '-':
        return False
    for i in range(4,7):
        if text[i].isdecimal():
            return True
    if text[7] != '-':
        return False
    for i in range(8,12):
        if text[i].isdecimal():
            return True
    return True

print("Please Give Number in Correct format (***-***-****)")
text = input("Number is : ")
# print("Enter Number",numberCheck("415-555-4242"))
# print(numberCheck('415-555-4242'))










# Regular expression
# regular expression in short is called regexes are descriptions for a pattern of a text
# For example, a \d in a regex stands for a digit character—
# that is, any single numeral 0 to 9.
# regular expression can be more complex but it will solve various problem
# adding a 3 in curly brackets ({3}) after a pattern is like saying,
# “Match this
# pattern three times.” So the slightly shorter regex \d{3}-\d{3}-\d{4} also
# matches the correct phone number format.
# Remember that \d means “a digit
# character” and
# \d\d\d-\d\d\d-\d\d\d\d is the regular expression for the correct phone number pattern.)

# Creating regex objects
# A Regex object’s search() method searches the string it is passed for any
# matches to the regex.
#  The search() method will return None if the regex pattern is not found in the string.
#  If the pattern is found, the search() method returns a Match object.
#  Match objects have a group() method that will return the actual matched text from the searched string




import re

phone_number = re.compile(r'\d\d\d-\d\d\d-\d\d\d')
mo_2 = phone_number.search('Number is 222-222-222')
print("Number Found is : " + mo_2.group())



Review of Regular Expression Matching
While there are several steps to using regular expressions in Python, each
step is fairly simple.
1. Import the regex module with import re.
2. Create a Regex object with the re.compile() function. (Remember to use a
raw string.)
3. Pass the string you want to search into the Regex object’s search() method.
This returns a Match object.
4. Call the Match object’s group() method to return a string of the actual
matched text.



# Say you want to separate the area code from the rest of the phone number.
# Adding parentheses will create groups in the regex: (\d\d\d)-(\d\d\d-\d\d\d\d).
# we can easily seperate what we want from phone number as with the help of parentheses.
# Then you can use the group() match object method to grab the matching text from just one group.



contact_number = re.compile(r'(\d\d\d)-(\d\d\d\d)-(\d\d\d\d)')
number = input("Please insert number in this order : ***-****-**** : ")



mo_mo = contact_number.search(number)
print("Result is : " + mo_mo.group(0))
print("First 3 number is : " + mo_mo.group(1))
print("Next 4 Number is : " + mo_mo.group(2))
print("Next 4 Number is : " + mo_mo.group(3))



Output is : -



Please insert number in this order : ***-****-**** : 989-9898-9898
Result is : 989-9898-9898
First 3 number is : 989
Next 4 Number is : 9898
Next 4 Number is : 9898
